--------------------------------------------------------------------------------

/*
    < 계정 생성 및 권한 부여 >
    SELECT * FROM DBA_USERS; : 모든 계정 조회
    CREATE USER kh IDENTIFIED BY kh; 
    GRANT CONNECT, RESOURCE TO kh;
*/

--------------------------------------------------------------------------------

/*
    < 시스템 설정 - 로컬 언어 변경 >
    SELECT *
    FROM NLS_SESSION_PARAMETERS; -- << 자동으로 생기는 테이블이고, 여기서 PARAMETER LANGUAGE 의 VALUE 를 영어로 바꿔야 함

    ALTER(변경하다) SESSION<테이블이름> SET NLS_LANGUAGE = AMERICAN; -- KOREAN(원본이 KOREAN 이라는 것을 알려주도록 백업 메모 남기는 습관)
    ALTER(변경하다) SESSION<테이블이름> SET NLS_LANGUAGE = KOREAN;
*/

--------------------------------------------------------------------------------

/*
    < SELECT >
    데이터 조회할 때 사용되는 구문
    
    >> RESULT SET : SELECT 문을 통해 조회된 결과물(즉, 조회된 행들의 집합을 의미)
    
    [표현법]
    SELECT 조회하고자 하는 컬럼명1, 컬럼명2, 컬럼명3, ...
    FROM 테이블명;
    
    SELECT *
    FROM 테이블명;
    * : 모든 게 다 들어올 수 있다는 의미
    
    >> 반드시 존재하는 컬럼으로 작성.
*/

--------------------------------------------------------------------------------

/*
    < 컬럼값을 통한 산술연산 >
    SELECT 컬럼명 작성 부분에 산술연산 기술 가능 (이 때, 산술연산된 결과 조회)
    
    SELECT 
        EMP_NAME, 
        SALARY, 
        BONUS, 
        SALARY*12, 
        (SALARY*(1+BONUS))*12
    FROM EMPLOYEE;
    
    >> 산술연산 과정 중 NULL 값이 존재할 경우 산술연산한 결과값 마저도 무조건 NULL로 나옴
*/

--------------------------------------------------------------------------------

/*
    < 컬럼명에 별칭 지정하기 >
    컬럼명으로 별칭 부여해서 깔끔하게 표시 가능
    
    [표현법]
    컬럼명 별칭 
    OR 컬럼명 "별칭"
    OR 컬럼명 AS 별칭 
    OR 컬럼명 AS "별칭"
    
    *별칭의 길이가 너무 길면 오류 발생 가능
    
    별칭에 띄어쓰기 OR 특수문자가 포함될 경우,
    반.드.시 쌍따옴표("")로 기술
*/

--------------------------------------------------------------------------------

/*
    < 리터럴 >
    임의로 지정한 문자열('')
    
    SELECT 절에 리터럴을 제시하면 마치 테이블상에 존재하는 컬럼 OR 데이터 처럼 조회 가능
    조회된 RESULT SET의 모든 행에 반복적으로 같이 출력
    
    SELECT 
        EMP_ID, 
        EMP_NAME, 
        SALARY, 
        '원' AS "단위"
    FROM EMPLOYEE;

*/

--------------------------------------------------------------------------------

/*
    < 연결 연산자 || >
    여러 컬럼값들을 마치 하나의 컬럼인 것처럼 연결하거나, 
    컬럼값과 리터럴을 연결 가능
*/

--------------------------------------------------------------------------------

/*
    < DISTINCT >
    컬럼에 중복된 값들을 한 번씩만 표시하고자 할 때 사용
    
    >> DISTINCT 는 SELECT 절에 단 한번만 기술 가능
    >> 두 번 이상 사용하면 missing expression(구문오류) 발생
*/

--------------------------------------------------------------------------------

/*
    < WHERE 절 >
    조회하고자 하는 테이블로부터 특정 조건에 만족하는 데이터만을 조회하고자 할 때 사용
    이 때, WHERE 절에는 조건식을 제시하게 됨
    조건식에는 다양한 연산자들 사용 가능
    
    [표현법]
    SELECT 컬럼1, 컬럼2, ...
    FROM 테이블명
    WHERE 조건식;            -- (조건식에 비교연산자 사용 가능)
    
    [비교연산자]
    >, <, >=, <=            -- 대소비교
    =                       -- 동등비교
    !=, ^=, <>              -- 동등하지 않은지 비교
*/

-- 급여가 400만원 이상인 사원들의 사원명, 부서코드, 급여 조회
SELECT 
    EMP_NAME, 
    DEPT_CODE, 
    SALARY
FROM EMPLOYEE
WHERE SALARY >= 4000000; -- SALARY 컬럼이 숫자 타입이여서 홑따옴표('')로 안 감싸도 OK
-- WHERE SALARY >= '4000000'; -- 이것도 잘 됨 (자동형변환, 문자는 형변환 자유롭지 않으니 주의)

--------------------------------------------------------------------------------

/*
    < BETWEEN A AND B >
    조건식에서 사용되는 구문
    몇 이상 몇 이하 범위에 대한 조건을 제시할 때 사용되는 연산자
    
    [표현법]
    비교대상컬럼 BETWEEN A(값1) AND B(값2)
    => 해당 컬럼값이 A이상이고 B이하인 경우를 의미
*/

/*
   < 논리부정연산자 NOT >
   컬럼명 앞 또는 함수 앞에 기입 가능
*/

--------------------------------------------------------------------------------

/*
    < LIKE >
    비교하고자 하는 컬럼값이 내가 제시한 특정 패턴에 만족될 경우 조회

    [표현법]
    비교대상컬럼 LIKE '특정패턴'
    
    - 특정 패턴 제시시 '%', '_' 를 와일드 카드를 사용 가능
    >> '%' : 0글자 이상
    EX) 비교대상컬럼 LIKE '문자%'            => 비교 대상의 컬럼값이 문자로 "시작"되는 걸 조회
        비교대상컬럼 LIKE '%문자'            => 비교 대상의 컬럼값이 문자로 "끝"나는 걸 조회
        비교대상컬럼 LIKE '%문자%'           => 비교 대상의 컬럼값에 문자가 "포함"되는 걸 조회 (키워드 검색)
        
    >> '_' : 1글자만
    EX) 비교대상컬럼 LIKE '_문자'            => 비교 대상의 컬럼값에 문자앞에 무조건 한 글자가 올 경우 조회
        비교대상컬럼 LIKE '문자_'            => 비교 대상의 컬럼값에 문자뒤에 무조건 한 글자가 올 경우 조회
        비교대상컬럼 LIKE '_문자_'           => 비교 대상의 컬럼값에 문자앞뒤에 무조건 한 글자가 올 경우 조회
*/

-- ** 특이케이스
-- 이메일 중 _기준으로 앞글자가 3글자인 사원들의 사번, 이름, 이메일 조회
-- EX) sim_bs@kh.or.kr, sun_di@kh.or.kr

SELECT 
    EMP_ID, 
    EMP_NAME, 
    EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '____%'; -- 이렇게 하면 원했던 결과 도출 X
-- 와일드 카드로 사용되고 있는 문자(_)와 컬럼값에 담긴 문자(_)가 동일해서 제대로 조회 불가능
-- >> 어떤 게 와일드 카드고 어떤 게 데이터 값인지 구분 짓기
-- >> 데이터 값으로 취급하고자 하는 값 앞에 나만의 와일드 카드를 제시하고, 나만의 와일드 카드를 ESCAPE OPTION 으로 등록 필요

SELECT 
    EMP_ID, 
    EMP_NAME, 
    EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '___$_%' ESCAPE '$'; -- ESCAPE OPTION 에는 와일드카드('_' , '%') 를 제외한 특문 중 아무거나 하나를 이용(보통 $ 사용)

--------------------------------------------------------------------------------

/*
    < IS NULL / IS NOT NULL >
    컬럼값에 NULL 이 있을 경우 NULL 값 비교에 사용되는 연산자
*/

--------------------------------------------------------------------------------

/*
    < IN >
    비교대상 컬럼값이 내가 제시한 목록중에 일치하는 값이 있는지
    
    [표현법]
    비교대상컬럼 IN ('값1','값2','값3',....)
*/

--------------------------------------------------------------------------------

/*
    < 연산자 우선 순위 >
    0. ()
    1. 산술연산자
    2. 연결연산자
    3. 비교연산자
    4. IS NULL / LIKE / IN
    5. BETWEEN A AND B
    6. NOT(논리연산자)
    7. AND(논리연산자) **
    8. OR(논리연산자) **
    
    => AND 와 OR 가 동시에 나온다면 AND 가 우선순위를 가진다.
*/

--------------------------------------------------------------------------------

/*
    < ORDER BY 절 >
    가장 마지막줄에 작성할 뿐만 아니라, 실행순서 또한 마지막에 실행
    
    [표현법]
    SELECT 조회할컬럼1, 컬럼2, 컬럼3, 산술연산식 AS "별칭"
    FROM 조회하고자 하는 테이블 명
    WHERE 조건식
    ORDER BY 정렬하고 싶은 컬럼|별칭|컬럼순번; [ASC|DESC] [NULLS FIRST|NULLS LAST]
                                  DEFAULT : ASC                    NULLS LAST
                          IF DESC DEFAULT :     DESC   NULLS FIRST
    ORDER BY 는 가장 마지막에 실행되기에 별칭으로 써도 OK
    
    - ASC : 오름차순 정렬 (생략 시 기본값)
    - DESC : 내림차순 정렬
    
    - NULLS FIRST : 정렬하고자 하는 컬럼값에 NULL이 있을 경우 해당 NULL인 데이터를 맨 앞 배치 (생략 시 DESC일때의 기본값)
    - NULLS LAST : 정렬하고자 하는 컬럼값에 NULL이 있을 경우 해당 NULL 데이터를 맨 뒤 배치 (생략 시 ASC일때의 기본값)
*/
